name: Deploy image from ECR to ECS
on:
  workflow_call:
    inputs:
      branch:
        description: "Valid branch: develop, main, hotfix"
        required: true
        type: string
      project-name:
        description: "Name of the project"
        required: true
        type: string
      aws-region:
        description: "AWS region of ECS cluster"
        required: true
        type: string
      cluster-name:
        description: "Name of the ECS cluster"
        required: true
        type: string
      service-name:
        description: "Name of the ECS service"
        required: false
        type: string
        default: ""
      task-name:
        description: "Name of the ECS task definition"
        required: false
        type: string
        default: ""
    secrets:
      aws-role:
        description: "AWS role to use"
        required: true
      ecr-repo:
        description: "ECR repo"
        required: true
defaults:
  run:
    shell: bash
    working-directory: .
jobs:
  input-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check Inputs
        run: |
          [[ "${{ inputs.branch }}" =~ ^(develop|main|hotfix/[A-za-z0-9\_\-]+)$ ]] || (echo "Unexpected branch - must be develop or main or hotfix" && false)
          [[ "${{ inputs.project-name }}" == "" ]] && (echo "Project name cannot be empty" && false)
          [[ "${{ inputs.aws-region }}" == "" ]] && (echo "AWS region cannot be empty" && false)
          [[ "${{ inputs.cluster-name }}" == "" ]] && (echo "Cluster name cannot be empty" && false)

  deploy:
    needs: input-check
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check Task Definition
        run: cat taskdef.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws-role }}
          aws-region: ${{ inputs.aws-region }}

      - name: Create amd register Task Definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ inputs.task-name != '' && inputs.task-name || inputs.project-name }} --no-cli-pager \
          | jq ".taskDefinition.containerDefinitions" | grep -o ":$GITHUB_SHA\"" && echo "Task defintion already exists with this image version" \
          || aws iam get-role --role-name ecsTaskExecutionRole | sed -e "s|\"<executionRoleArn>\"|$(jq ".Role.Arn")|g" -e "s|<image>|${{ secrets.ecr-repo }}/${{ inputs.project-name }}:$GITHUB_SHA|g" \
          -e "s|<awslogs-region>|${{ inputs.aws-region }}|g" -e "s|<environment>|${{ (github.ref_name == 'main' && 'prod' || 'test') }}|g" taskdef.json \
          | aws ecs register-task-definition --cli-input-json "$(cat)" --no-cli-pager | sed -e "s|$(echo ${{ secrets.aws-role }} | grep -o "[0-9]\+")|<awsAccountId>|g"

      - name: Update Service
        run: |
          latest_task_def=$(aws ecs describe-task-definition --task-definition ${{ inputs.task-name != '' && inputs.task-name || inputs.project-name }} --no-cli-pager)
          echo "$latest_task_def" | jq ".taskDefinition.containerDefinitions" | grep -o ":$GITHUB_SHA\"" \
          && aws ecs update-service --cluster ${{ inputs.cluster-name }} \
          --service ${{ inputs.service-name != '' && inputs.service-name || format('{0}-{1}', inputs.project-name, github.ref_name == 'main' && 'prod' || 'test') }} \
          --task-definition ${{ inputs.task-name != '' && inputs.task-name || inputs.project-name }}:$(echo "$latest_task_def" | jq ".taskDefinition.revision") \
          --no-cli-pager | sed -e "s|$(echo ${{ secrets.aws-role }} | grep -o "[0-9]\+")|<awsAccountId>|g" \
          || (echo "Task defintion does not exists with this image version" && false)
