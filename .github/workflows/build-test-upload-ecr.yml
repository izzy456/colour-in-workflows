name: Build and test image then upload to ECR
on:
  workflow_call:
    inputs:
      branch:
        description: "Valid branch: feature, develop, hotfix or main"
        required: true
        type: string
      project-name:
        description: "Name of the project"
        required: true
        type: string
      aws-region:
        description: "AWS region of ECR repo"
        required: true
        type: string
      sonar-args:
        description: "Additional sonar arguments"
        required: false
        type: string
        default: ""
      build-args:
        description: "Build arguments"
        type: string
        required: false
        default: ""
    secrets:
      aws-role:
        description: "AWS role to use"
        required: true
      sonar-token:
        description: "Sonar token"
        required: true
      sonar-host-url:
        description: "Sonar host"
        required: true
      ecr-repo:
        description: "ECR repo"
        required: true
      build-secrets:
        description: "Build secrets"
        required: false
defaults:
  run:
    shell: bash
    working-directory: .

jobs:
  input-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check Inputs
        run: |
          [[ "${{ inputs.build-args }}" == "" || "${{ inputs.build-args }}" =~ ^[a-z\_]+=([a-z0-9\-]+|https?:\/\/[a-z0-9\.\-\\\?\=\&]+)(\ [a-z\_]+=([a-z0-9\-]+|https?:\/\/[a-z0-9\.\-\\\?\=\&]+))*$ ]] \
          || (echo -e "Unexpected build-args - must be formatted like arg_name=value:\
          \n\t- arg_name can only contain lowercase letters and underscores\
          \n\t- value can contain lowercase letters, numbers and  hyphens or be a url\
          \n\t- multiple args must be delimited by a single space" \
          && false)
          [[ "${{ inputs.branch }}" =~ ^(feature\/[A-Za-z0-9\_\-]+|develop|hotfix\/[A-Za-z0-9\_\-]+|main)$ ]] \
          || (echo "Unexpected branch - must be feature or develop or hotfix or main" && false)

  build:
    needs: input-check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check Docker image runs tests
        run: |
          grep -E "pytest|npm test" Dockerfile && echo "Confirmed tests are being run in Dockerfile" \
          || echo "Please include test stage in Dockerfile - currently only checking for pytest and npm test"
      
      - name: Build Docker image
        run: |
          build_args=""
          for arg in ${{ inputs.build-args }}
          do
            build_args+="--build-arg $arg "
          done
          [[ "${{ secrets.build-secrets }}" != "" ]] && cat ${{ secrets.build-secrets }} > build_secrets \
          && docker build -t ${{ inputs.project-name }}:$GITHUB_SHA $build_args --secret id=build_secrets,src=./build_secrets .
          || docker build -t ${{ inputs.project-name }}:$GITHUB_SHA $build_args .
        
  scan:
    needs: input-check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        id: scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.sonar-token }}
          SONAR_HOST_URL: ${{ secrets.sonar-host-url }}
          INPUT_PROJECTBASEDIR: .
        with:
          args: >
            -Dsonar.projectKey=${{ inputs.project-name }}
            -Dsonar.sources=.
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.timeout=120
            ${{ inputs.sonar-args }}
            
  upload:
    if: ${{ !contains(inputs.branch, 'feature') }}
    needs: [build, scan]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws-role }}
          aws-region: ${{ inputs.aws-region }}

      - name: Build Docker image
        run: |
          build_args=""
          for arg in ${{ inputs.build-args }}
          do
            build_args+="--build-arg $arg "
          done
          [[ "${{ secrets.build-secrets }}" != "" ]] && cat ${{ secrets.build-secrets }} > build_secrets \
          && docker build -t ${{ inputs.project-name }}:$GITHUB_SHA $build_args --secret id=build_secrets,src=./build_secrets .
          || docker build -t ${{ inputs.project-name }}:$GITHUB_SHA $build_args .

      - name: Login to ECR
        run: aws ecr get-login-password --region ${{ inputs.aws-region }} | docker login --username AWS --password-stdin ${{ secrets.ecr-repo }}

      - name: Tag image and upload to ECR
        id: tag_upload
        run: |
          aws ecr list-images --repository ${{ inputs.project-name }} | grep -o $GITHUB_SHA && echo "Image already exists skipping upload" \
          || (docker tag ${{ inputs.project-name }}:$GITHUB_SHA ${{ secrets.ecr-repo }}/${{ inputs.project-name }}:$GITHUB_SHA \
          && docker push ${{ secrets.ecr-repo }}/${{ inputs.project-name }}:$GITHUB_SHA)
